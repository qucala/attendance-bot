import telebot
import csv
import codecs
import datetime
import os
from dotenv import load_dotenv
from rtu_schedule_parser import ExcelScheduleParser, ScheduleData
from rtu_schedule_parser.constants import Institute, Degree
from rtu_schedule_parser.downloader import ScheduleDownloader
import requests
from time import sleep
from telebot.types import ReactionTypeEmoji
load_dotenv()
TOKEN = os.getenv('TOKEN')
TARGET_CHAT_ID = os.getenv('TARGET_CHAT_ID')
MESSAGE_THREAD_ID = os.getenv('MESSAGE_THREAD_ID')
group=os.getenv('GROUP')
bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['send_poll_today'])
def send_polles(message):
    try:
        r=requests.get('https://www.timeapi.io/api/time/current/zone?timeZone=Europe%2FMoscow').json()
        days_translation = {
            "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "—Å—Ä–µ–¥–∞",
            "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "—Å—É–±–±–æ—Ç–∞",
            "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        day_of_week_english = r["dayOfWeek"]
        day_of_week_russian = str(days_translation.get(day_of_week_english))
        print(day_of_week_russian)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # args = message.text.split()[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É '/send_poll'
        
        
        
        tw = str(datetime.datetime.now().isocalendar()[1]-35)  # –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        day = day_of_week_russian  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏

        
                # Initialize downloader with default directory to save files
        downloader = ScheduleDownloader()

        # Get documents for specified institute and degree
        docs = downloader.get_documents(specific_institutes={Institute.IIT}, specific_degrees={Degree.BACHELOR})

        # Download only if they are not downloaded yet.
        downloaded = downloader.download_all(docs)

        # Create schedule with downloaded files
        schedules = None  # type: ScheduleData | None
        for doc in downloaded:
            parser = ExcelScheduleParser(
                doc[1], doc[0].period, doc[0].institute, doc[0].degree
            )
            
            # The `force` argument is used to ignore exceptions during document parsing. 
            # This lets you to parse all possible groups.
            if schedules is None:
                schedules = parser.parse(force=True)
            else:
                schedules.extend(parser.parse(force=True).get_schedule())

        # Get a schedule for the specified group
        group_schedule = schedules.get_group_schedule(group)

        # Initialize pandas dataframe
        df = group_schedule.get_dataframe()
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        df=df.drop_duplicates()
        # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        
        first_sort=df[df['weeks'].apply(lambda x: tw in x)]
        second_sort=first_sort[df['weekday'].apply(lambda x: day in x)]
        # df_filtered = df[df['weeks'].apply(lambda x: tw in x.split(','))]
        for i, data in second_sort[['lesson_num', 'lesson','type']].iterrows():
            print(data['lesson_num'],data['lesson'],data['type'])
            days_dic = {
                "–ª–µ–∫": "–õ–µ–∫—Ü–∏—è",
                "–ª–∞–±": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è",
                "–ø—Ä": "–ü—Ä–∞–∫—Ç–∏–∫–∞",
                
            }
            data_not_sorted = data['type']
            data_sorted = str(days_dic.get(data_not_sorted))
            bot.send_poll(chat_id=TARGET_CHAT_ID,message_thread_id=MESSAGE_THREAD_ID,question=str(str(data['lesson_num'])+'  '+data_sorted+'  '+'–ø–æ  '+data['lesson']), is_anonymous=False,options=['–Ø', '–ù–µ —è(—É)', '–ù–µ —è(–Ω)', '–û–ø–∞'])
            
        
        bot.set_message_reaction(message.chat.id, message.id, [ReactionTypeEmoji('üëç')], is_big=False)
        sleep(5)
        bot.delete_message(chat_id=message.chat.id,message_id=message.id)
    
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —É–∫–∞–∑–∞–Ω —á–∏—Å–ª–æ–º.")
    
bot.polling()
